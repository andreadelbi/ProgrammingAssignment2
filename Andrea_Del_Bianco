#The aim of these functions is to calculate inverse matrix in a faster way than computing it many times.
#Following method consist of to cache inside a matrix its inverse.

#First function creates the matrix where its inverse is stored.

makeCacheMatrix <- function(x=matrix()){

inv <<- NULL

set<- function(y){

x <<- y

inv <<- NULL

}

get <- function() x

setinv <- function(solve) inv <<- solve

getinv <- function() inv
        
list(set= set,get = get,setinv = setinv, getinv = getinv)

}

#This function calculates inverse matrix generated by previous function or returns the value if it is already been calculated.

cacheSolve <- function(x,...){

inv <- x$getinv()

if(!is.null(inv)){
message("getting cached data")
return(inv)
}

data <- x$get()

inv <- solve(data, ...)

x$setinv(inv)

inv

}
